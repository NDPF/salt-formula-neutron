{%- from "neutron/map.jinja" import compute with context -%}
[DEFAULT]

#
# From networking_ovn.metadata.agent
#

# Location for Metadata Proxy UNIX domain socket. (string value)
#metadata_proxy_socket = $state_path/metadata_proxy

# User (uid or name) running metadata proxy after its initialization
# (if empty: agent effective user). (string value)
#metadata_proxy_user =

# Group (gid or name) running metadata proxy after its initialization
# (if empty: agent effective group). (string value)
#metadata_proxy_group =

# Name of Open vSwitch bridge to use (string value)
#ovs_integration_bridge = br-int

# Certificate Authority public key (CA cert) file for ssl (string
# value)
#auth_ca_cert = <None>

# IP address or DNS name of Nova metadata server. (unknown value)
# Deprecated group/name - [DEFAULT]/nova_metadata_ip
nova_metadata_host = {{ compute.metadata.host }}

# TCP Port used by Nova metadata server. (port value)
# Minimum value: 0
# Maximum value: 65535
#nova_metadata_port = 8775

# When proxying metadata requests, Neutron signs the Instance-ID
# header with a shared secret to prevent spoofing. You may select any
# string for a secret, but it must match here and in the configuration
# used by the Nova Metadata Server. NOTE: Nova uses the same config
# key, but in [neutron] section. (string value)
metadata_proxy_shared_secret = {{ compute.metadata.password }}

# Protocol to access nova metadata, http or https (string value)
# Possible values:
# http - <No description provided>
# https - <No description provided>
#nova_metadata_protocol = http

# Allow to perform insecure SSL (https) requests to nova metadata
# (boolean value)
#nova_metadata_insecure = false

# Client certificate for nova metadata api server. (string value)
#nova_client_cert =

# Private key of client certificate. (string value)
#nova_client_priv_key =

# Metadata Proxy UNIX domain socket mode, 4 values allowed: 'deduce':
# deduce mode from metadata_proxy_user/group values, 'user': set
# metadata proxy socket mode to 0o644, to use when metadata_proxy_user
# is agent effective user or root, 'group': set metadata proxy socket
# mode to 0o664, to use when metadata_proxy_group is agent effective
# group or root, 'all': set metadata proxy socket mode to 0o666, to
# use otherwise. (string value)
# Possible values:
# deduce - <No description provided>
# user - <No description provided>
# group - <No description provided>
# all - <No description provided>
#metadata_proxy_socket_mode = deduce

# Number of separate worker processes for metadata server (defaults to
# half of the number of CPUs) (integer value)
#metadata_workers = 16

# Number of backlog requests to configure the metadata server socket
# with (integer value)
#metadata_backlog = 4096

[ovs]

#
# From networking_ovn.metadata.agent
#

# The connection string for the native OVSDB backend.
# Use tcp:IP:PORT for TCP connection.
# Use unix:FILE for unix domain socket connection. (string value)
#ovsdb_connection = unix:/usr/local/var/run/openvswitch/db.sock

# Timeout in seconds for the OVSDB connection transaction (integer
# value)
#ovsdb_connection_timeout = 180

[ovn]

ovn_sb_connection = tcp:{{ compute.controller_vip }}:6642
