{%- set log_handlers = [] -%}
{%- for log_handler_name, log_handler_attrs in values.logging.log_handlers.items() %}
  {%- if log_handler_attrs.get('enabled', False) %}
    {%- do log_handlers.append(log_handler_name) -%}
  {%- endif %}
{%- endfor %}
[loggers]
keys = root, neutron, eventletwsgi

[handlers]
keys = {{ log_handlers | join(", ") }}

[formatters]
keys = context, default{% if values.logging.log_handlers.get('fluentd', {}).get('enabled', False) %}, fluentd{% endif %}

[logger_root]
level = {{ values.logging.get('loggers', {}).get('root', {}).get('level', 'WARNING') }}
handlers = {{ log_handlers | join(", ") }}

[logger_neutron]
level = {{ values.logging.get('loggers', {}).get('neutron', {}).get('level', 'INFO') }}
handlers = {{ log_handlers | join(", ") }}
qualname = neutron

[logger_amqplib]
level = {{ values.logging.get('loggers', {}).get('amqplib', {}).get('level', 'WARNING') }}
handlers = {{ log_handlers | join(", ") }}
qualname = amqplib

[logger_sqlalchemy]
level = {{ values.logging.get('loggers', {}).get('sqlalchemy', {}).get('level', 'WARNING') }}
handlers = {{ log_handlers | join(", ") }}
qualname = sqlalchemy

[logger_boto]
level = {{ values.logging.get('loggers', {}).get('boto', {}).get('level', 'WARNING') }}
handlers = {{ log_handlers | join(", ") }}
qualname = boto

[logger_suds]
level = {{ values.logging.get('loggers', {}).get('suds', {}).get('level', 'INFO') }}
handlers = {{ log_handlers | join(", ") }}
qualname = suds

[logger_eventletwsgi]
level = {{ values.logging.get('loggers', {}).get('eventletwsgi', {}).get('level', 'INFO') }}
handlers = {{ log_handlers | join(", ") }}
qualname = eventlet.wsgi.server

{%- if values.logging.log_handlers.get('fluentd', {}).get('enabled', False) %}
[handler_fluentd]
class = fluent.handler.FluentHandler
args = ('openstack.{{ service_name | replace("-", ".", 1) }}', 'localhost', 24224)
formatter = fluentd
{%- endif %}

{%- if values.logging.log_handlers.watchedfile.enabled %}
[handler_watchedfile]
class = handlers.WatchedFileHandler
args = ('/var/log/neutron/{{ service_name }}.log',)
formatter = context
{%- endif %}

{% if values.logging.log_handlers.get('ossyslog', {}).get('enabled', False) -%}
{%- set ossyslog_args = values.logging.log_handlers.ossyslog.get('args', {}) -%}
[handler_ossyslog]
class = oslo_log.handlers.OSSysLogHandler
# the OSSysLogHandler uses 'syslog' lib, where the LOG_* facilities are already *8
# but in the context where the args are evaluated we have access only to Python's
# handlers.SysLogHandler.LOG_* constants that _ARE_NOT_ multiplied by 8.
# To not have a completely magic single int in the rendered template,
# we multiply it here.
args = ( 8 * handlers.SysLogHandler.{{ ossyslog_args.get('facility', 'LOG_USER') }}, )
formatter = context
{%- endif %}

[formatter_context]
class = oslo_log.formatters.ContextFormatter

[formatter_default]
format = %(message)s

{%- if values.logging.log_handlers.get('fluentd', {}).get('enabled', False) %}
[formatter_fluentd]
class = oslo_log.formatters.FluentFormatter
{%- endif %}
